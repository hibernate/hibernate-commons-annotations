/*
 * Hibernate, Relational Persistence for Idiomatic Java
 *
 * License: GNU Lesser General Public License (LGPL), version 2.1 or later
 * See the lgpl.txt file in the root directory or http://www.gnu.org/licenses/lgpl-2.1.html
 */

apply plugin: 'base'

File versionFile = file( "${rootProject.projectDir}/gradle/version.properties" )

ext {
	hcannVersionFile = versionFile
	hcannVersion = HibernateVersion.fromFile( versionFile, project )
	// Override during releases
	if ( project.hasProperty( 'releaseVersion' ) ) {
		hcannVersion = new HibernateVersion( project.releaseVersion, project )
	}
}

group = 'org.hibernate.common'
version = project.hcannVersion.fullName

buildDir = "target"

java {
	toolchain {
		languageVersion.set(JavaLanguageVersion.of(11))
	}
}

class HibernateVersion {
	final String fullName
	final String majorVersion
	final String family

	final String osgiVersion

	final boolean isSnapshot

	HibernateVersion(String fullName, Project project) {
		this.fullName = fullName

		final String[] hibernateVersionComponents = fullName.split( '\\.' )
		this.majorVersion = hibernateVersionComponents[0]
		this.family = hibernateVersionComponents[0] + '.' + hibernateVersionComponents[1]

		this.isSnapshot = fullName.endsWith( '-SNAPSHOT' )

		this.osgiVersion = isSnapshot ? family + '.' + hibernateVersionComponents[2] + '.SNAPSHOT' : fullName
	}

	static HibernateVersion fromFile(File file, Project project){
		def fullName = readVersionProperties(file)
		return new HibernateVersion(fullName, project)
	}

	private static String readVersionProperties(File file) {
		if ( !file.exists() ) {
			throw new GradleException( "Version file $file.canonicalPath does not exists" )
		}
		Properties versionProperties = new Properties()
		file.withInputStream {
			stream -> versionProperties.load( stream )
		}
		return versionProperties.hibernateVersion
	}

	@Override
	String toString() {
		return this.fullName
	}
}
