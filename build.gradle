buildscript {
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath 'org.hibernate.build.gradle:gradle-maven-publish-auth:2.0.1'
        classpath 'org.hibernate.build.gradle:gradle-animalSniffer-plugin:1.0.1.Final'
        classpath "com.diffplug.spotless:spotless-plugin-gradle:6.25.0"
        classpath 'nu.studer:gradle-credentials-plugin:2.2'
    }
}

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'nu.studer.credentials' version '2.1'
    id 'idea'
    id 'eclipse'
}

repositories {
    mavenCentral()
}

apply from: rootProject.file( 'gradle/base-information.gradle' )
apply from: rootProject.file( 'gradle/publishing.gradle' )

apply plugin: 'com.diffplug.spotless'

dependencies {
    testImplementation 'junit:junit:3.8.1'
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

spotless {
    //Don't fail during the check: rather than enforcing guidelines, we use this plugin to fix mistakes automatically.
    enforceCheck false
    java {
        licenseHeaderFile 'spotless.license.java'
        removeUnusedImports()
        importOrder()
        trimTrailingWhitespace()
        endWithNewline()
    }
}
tasks.compileJava.dependsOn(spotlessApply)

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

// Main binaries use a Java 11 baseline
compileJava {
    sourceCompatibility = 11
    targetCompatibility = 11
}
// ... and we want to test against that
compileTestJava {
    sourceCompatibility = 11
    targetCompatibility = 11
}

// Some tests require Java 17
if ( !JavaVersion.current().isCompatibleWith( JavaVersion.VERSION_17 ) ) {
    throw new IllegalStateException("Building this project requires JDK 17 (produced binaries will still target Java 11).")
}
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

// We add a new source set, which contains tests that can run on JDK17+
sourceSets {
    testJava17 {
        java {
            srcDirs = ['src/test/java17']
        }
    }
}

// For the new source set, we need to configure the source and target version to 17
compileTestJava17Java {
    sourceCompatibility = 17
    targetCompatibility = 17
}

// The source set gets a custom configuration which extends the normal test implementation config
configurations {
    testJava17Implementation.extendsFrom(testImplementation, testRuntimeOnly)
    testJava17CompileOnly.extendsFrom(testCompileOnly)
}

// Add the output from src/main/java as dependency
dependencies {
    testJava17Implementation files(sourceSets.main.output.classesDirs) {
        builtBy compileJava
    }
}

// We execute the Java 17 tests in a custom test task
task testJava17(type: Test) {
    testClassesDirs = sourceSets.testJava17.output.classesDirs
    classpath = sourceSets.testJava17.runtimeClasspath
}

testClasses.dependsOn compileTestJava17Java
// And run this as part of the check task by default
check.dependsOn testJava17