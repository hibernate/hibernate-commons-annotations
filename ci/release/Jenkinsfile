#! /usr/bin/groovy
/*
 * SPDX-License-Identifier: Apache-2.0
 * Copyright: Red Hat Inc. and Hibernate Authors
 */

/*
 * See https://github.com/hibernate/hibernate-jenkins-pipeline-helpers
 */
@Library('hibernate-jenkins-pipeline-helpers@1.17') _

import org.hibernate.jenkins.pipeline.helpers.version.Version

// --------------------------------------------
// Global build configuration
env.PROJECT = "hcann"
env.JIRA_KEY = "HCANN"

print "INFO: env.PROJECT = ${env.PROJECT}"
print "INFO: env.JIRA_KEY = ${env.JIRA_KEY}"

// --------------------------------------------
// Build conditions

// Avoid running the pipeline on branch indexing
if (currentBuild.getBuildCauses().toString().contains('BranchIndexingCause')) {
	print "INFO: Build skipped due to trigger being Branch Indexing"
	currentBuild.result = 'NOT_BUILT'
	return
}

def manualRelease = currentBuild.getBuildCauses().toString().contains( 'UserIdCause' )

// Avoid running the pipeline on push
if ( !manualRelease ) {
	print "INFO: Build skipped because automated releases are disabled."
	currentBuild.result = 'NOT_BUILT'
	return
}

// --------------------------------------------
// Reusable methods

def checkoutReleaseScripts() {
	dir('.release/scripts') {
		checkout scmGit(branches: [[name: '*/main']], extensions: [],
				userRemoteConfigs: [[credentialsId: 'ed25519.Hibernate-CI.github.com',
									 url: 'https://github.com/hibernate/hibernate-release-scripts.git']])
	}
}

// --------------------------------------------
// Pipeline

pipeline {
	agent {
		label 'Release'
	}
	tools {
		jdk 'OpenJDK 17 Latest'
	}
	options {
		buildDiscarder logRotator(daysToKeepStr: '30', numToKeepStr: '10')
		disableConcurrentBuilds(abortPrevious: false)
		preserveStashes()
	}
	parameters {
		string(
				name: 'RELEASE_VERSION',
				defaultValue: '',
				description: 'The version to be released, e.g. 7.0.1.Final. Mandatory, to prevent mistakes.',
				trim: true
		)
		string(
				name: 'DEVELOPMENT_VERSION',
				defaultValue: '',
				description: 'The next version to be used after the release, e.g. 7.0.2-SNAPSHOT. If not set, determined automatically from the release version.',
				trim: true
		)
		booleanParam(
				name: 'RELEASE_DRY_RUN',
				defaultValue: false,
				description: 'If true, just simulate the release, without pushing any commits or tags, and without uploading any artifacts or documentation.'
		)
	}
	stages {
		stage('Release check') {
			steps {
				script {
					checkoutReleaseScripts()

					def currentVersion = Version.parseDevelopmentVersion( sh(
							script: ".release/scripts/determine-current-version.sh ${env.PROJECT}",
							returnStdout: true
					).trim() )
					echo "Workspace version: ${currentVersion}"

					def releaseVersion
					def developmentVersion

					echo "Release was requested manually"

					if ( !params.RELEASE_VERSION ) {
							throw new IllegalArgumentException( 'Missing value for parameter RELEASE_VERSION. This parameter must be set explicitly to prevent mistakes.' )
					}
					releaseVersion = Version.parseReleaseVersion( params.RELEASE_VERSION )

					if ( !releaseVersion.toString().startsWith( currentVersion.family + '.' ) ) {
						throw new IllegalArgumentException( "RELEASE_VERSION = $releaseVersion, which is different from the family of CURRENT_VERSION = $currentVersion. Did you make a mistake?" )
					}
					echo "Release version: ${releaseVersion}"

					if ( !params.DEVELOPMENT_VERSION ) {
						developmentVersion = Version.parseDevelopmentVersion( sh(
								script: ".release/scripts/determine-development-version.sh ${releaseVersion}",
								returnStdout: true
						).trim() )
					}
					else {
						developmentVersion = Version.parseDevelopmentVersion( params.DEVELOPMENT_VERSION )
					}
					echo "Development version: ${developmentVersion}"

					env.RELEASE_VERSION = releaseVersion.toString()
					env.DEVELOPMENT_VERSION = developmentVersion.toString()
					env.SCRIPT_OPTIONS = params.RELEASE_DRY_RUN ? "-d" : ""
				}
			}
		}
		stage('Prepare release') {
			steps {
				script {
					checkoutReleaseScripts()

					// set release version
					// update changelog from JIRA
					// tag the version
					sh ".release/scripts/prepare-release.sh ${env.PROJECT} ${env.RELEASE_VERSION}"
				}
			}
		}
		stage('Publish release') {
			steps {
				script {
					checkoutReleaseScripts()

					configFileProvider([
							configFile(fileId: 'release.config.ssh', targetLocation: "${env.HOME}/.ssh/config"),
							configFile(fileId: 'release.config.ssh.knownhosts', targetLocation: "${env.HOME}/.ssh/known_hosts")
					]) {
						withCredentials([
								usernamePassword(credentialsId: 'ossrh.sonatype.org', passwordVariable: 'OSSRH_PASSWORD', usernameVariable: 'OSSRH_USER'),
						]) {
							sshagent(['ed25519.Hibernate-CI.github.com']) {
								// perform documentation upload and Sonatype release
								// change the version to the development version
								// push to github
								sh ".release/scripts/publish.sh ${env.SCRIPT_OPTIONS} ${env.PROJECT} ${env.RELEASE_VERSION} ${env.DEVELOPMENT_VERSION} ${env.GIT_BRANCH}"
							}
						}
					}
				}
			}
		}
	}
 	post {
		always {
			notifyBuildResult notifySuccessAfterSuccess: true, maintainers: 'yoann@hibernate.org'
		}
 	}
}